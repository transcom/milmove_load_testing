############
#
# Caches
#
# Caches may have a `v1-` prefix, since caches in CircleCI 2.0 are immutable.
# A prefix provides an easy way to invalidate a cache.  See https://circleci.com/docs/2.0/caching/#clearing-cache
#
############

version: "2.1"

# References for variables shared across the file
references:

  # cache key for shellcheck that includes version. Make sure to
  # update the URL, too
  shellcheck-cache-key: &shellcheck-cache-key v1-shellcheck-install-0.8.0

executors:
  primary:
    resource_class: small
    docker:
      - image: cimg/python:3.11.3
    environment:
      PIPENV_VENV_IN_PROJECT: true

jobs:

  # `test` is used to run pre-commit hooks on all files
  test:
    executor: primary
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}-{{ .Environment.PYTHON_VERSION }}
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: v2-pipenv-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYTHON_VERSION }}
      - restore_cache:
          # make sure to update the key in save_cache too
          key: *shellcheck-cache-key
      - run:
          # when updating the version, make sure to also update the
          # shellcheck-cache-key
          name: install shellcheck if needed
          command: |
            test -x ~/.local/bin/shellcheck ||
            curl -L -o - \
            https://github.com/koalaman/shellcheck/releases/download/v0.8.0/shellcheck-v0.8.0.linux.x86_64.tar.xz |
            tar Jxf - --strip-components=1 --exclude=*txt -C ~/.local/bin
      - run:
          name: install dependencies
          command: |  # use pipenv to install dependencies
            pipenv sync -d
      - run: pipenv run pre-commit install --install-hooks
      - run:
          name: Run pre-commit tests
          command: pipenv run pre-commit run --all-files
      - run:
          name: run tests
          command: |
            make test_coverage
      - store_test_results:
          path: ~/project/junit/report.xml
      - store_artifacts:
          path: ~/project/coverage_html
          destination: coverage_html
      - save_cache:
          key: v2-pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}-{{ .Environment.PYTHON_VERSION }}
          paths:
            - ~/.cache/pre-commit
      - save_cache:
          key: v2-pipenv-{{ checksum "Pipfile.lock" }}-{{ .Environment.PYTHON_VERSION }}
          paths:
            - ".venv"
      - save_cache:
          key: *shellcheck-cache-key
          paths:
            - ~/.local/bin/shellcheck

  # `build` confirms a docker build works
  build:
    executor: primary
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: docker build
          command: |
            docker build -t milmove_load_testing:local .
workflows:
  version: 2

  main:
    jobs:
      - test
      - build
