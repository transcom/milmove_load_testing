"""
    MilMove Internal API

    The Internal API is a RESTful API that enables the Customer application for MilMove.  All endpoints are located under `/internal`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: ppp@truss.works
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from internal_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from internal_client.exceptions import ApiAttributeError


def lazy_import():
    from internal_client.model.omittable_ppm_document_status import OmittablePPMDocumentStatus
    from internal_client.model.weight_ticket_empty_document import WeightTicketEmptyDocument
    from internal_client.model.weight_ticket_full_document import WeightTicketFullDocument
    from internal_client.model.weight_ticket_proof_of_trailer_ownership_document import WeightTicketProofOfTrailerOwnershipDocument
    globals()['OmittablePPMDocumentStatus'] = OmittablePPMDocumentStatus
    globals()['WeightTicketEmptyDocument'] = WeightTicketEmptyDocument
    globals()['WeightTicketFullDocument'] = WeightTicketFullDocument
    globals()['WeightTicketProofOfTrailerOwnershipDocument'] = WeightTicketProofOfTrailerOwnershipDocument


class WeightTicket(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('empty_weight',): {
            'inclusive_minimum': 0,
        },
        ('full_weight',): {
            'inclusive_minimum': 0,
        },
        ('adjusted_net_weight',): {
            'inclusive_minimum': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'ppm_shipment_id': (str,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'updated_at': (datetime,),  # noqa: E501
            'empty_document_id': (str,),  # noqa: E501
            'empty_document': (WeightTicketEmptyDocument,),  # noqa: E501
            'full_document_id': (str,),  # noqa: E501
            'full_document': (WeightTicketFullDocument,),  # noqa: E501
            'proof_of_trailer_ownership_document_id': (str,),  # noqa: E501
            'proof_of_trailer_ownership_document': (WeightTicketProofOfTrailerOwnershipDocument,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'vehicle_description': (str, none_type,),  # noqa: E501
            'empty_weight': (int, none_type,),  # noqa: E501
            'missing_empty_weight_ticket': (bool, none_type,),  # noqa: E501
            'full_weight': (int, none_type,),  # noqa: E501
            'missing_full_weight_ticket': (bool, none_type,),  # noqa: E501
            'owns_trailer': (bool, none_type,),  # noqa: E501
            'trailer_meets_criteria': (bool, none_type,),  # noqa: E501
            'status': (OmittablePPMDocumentStatus,),  # noqa: E501
            'reason': (str, none_type,),  # noqa: E501
            'adjusted_net_weight': (int, none_type,),  # noqa: E501
            'net_weight_remarks': (str, none_type,),  # noqa: E501
            'e_tag': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'ppm_shipment_id': 'ppmShipmentId',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'updated_at': 'updatedAt',  # noqa: E501
        'empty_document_id': 'emptyDocumentId',  # noqa: E501
        'empty_document': 'emptyDocument',  # noqa: E501
        'full_document_id': 'fullDocumentId',  # noqa: E501
        'full_document': 'fullDocument',  # noqa: E501
        'proof_of_trailer_ownership_document_id': 'proofOfTrailerOwnershipDocumentId',  # noqa: E501
        'proof_of_trailer_ownership_document': 'proofOfTrailerOwnershipDocument',  # noqa: E501
        'id': 'id',  # noqa: E501
        'vehicle_description': 'vehicleDescription',  # noqa: E501
        'empty_weight': 'emptyWeight',  # noqa: E501
        'missing_empty_weight_ticket': 'missingEmptyWeightTicket',  # noqa: E501
        'full_weight': 'fullWeight',  # noqa: E501
        'missing_full_weight_ticket': 'missingFullWeightTicket',  # noqa: E501
        'owns_trailer': 'ownsTrailer',  # noqa: E501
        'trailer_meets_criteria': 'trailerMeetsCriteria',  # noqa: E501
        'status': 'status',  # noqa: E501
        'reason': 'reason',  # noqa: E501
        'adjusted_net_weight': 'adjustedNetWeight',  # noqa: E501
        'net_weight_remarks': 'netWeightRemarks',  # noqa: E501
        'e_tag': 'eTag',  # noqa: E501
    }

    read_only_vars = {
        'ppm_shipment_id',  # noqa: E501
        'created_at',  # noqa: E501
        'updated_at',  # noqa: E501
        'empty_document_id',  # noqa: E501
        'full_document_id',  # noqa: E501
        'proof_of_trailer_ownership_document_id',  # noqa: E501
        'id',  # noqa: E501
        'e_tag',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, ppm_shipment_id, created_at, updated_at, empty_document_id, empty_document, full_document_id, full_document, proof_of_trailer_ownership_document_id, proof_of_trailer_ownership_document, *args, **kwargs):  # noqa: E501
        """WeightTicket - a model defined in OpenAPI

        Args:
            ppm_shipment_id (str): The ID of the PPM shipment that this set of weight tickets is for.
            created_at (datetime):
            updated_at (datetime):
            empty_document_id (str): ID of the document that is associated with the user uploads containing the vehicle weight when empty.
            empty_document (WeightTicketEmptyDocument):
            full_document_id (str): ID of the document that is associated with the user uploads containing the vehicle weight when full.
            full_document (WeightTicketFullDocument):
            proof_of_trailer_ownership_document_id (str): ID of the document that is associated with the user uploads containing the proof of trailer ownership.
            proof_of_trailer_ownership_document (WeightTicketProofOfTrailerOwnershipDocument):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): ID of this set of weight tickets.. [optional]  # noqa: E501
            vehicle_description (str, none_type): Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.. [optional]  # noqa: E501
            empty_weight (int, none_type): Weight of the vehicle when empty.. [optional]  # noqa: E501
            missing_empty_weight_ticket (bool, none_type): Indicates if the customer is missing a weight ticket for the vehicle weight when empty.. [optional]  # noqa: E501
            full_weight (int, none_type): The weight of the vehicle when full.. [optional]  # noqa: E501
            missing_full_weight_ticket (bool, none_type): Indicates if the customer is missing a weight ticket for the vehicle weight when full.. [optional]  # noqa: E501
            owns_trailer (bool, none_type): Indicates if the customer used a trailer they own for the move.. [optional]  # noqa: E501
            trailer_meets_criteria (bool, none_type): Indicates if the trailer that the customer used meets all the criteria to be claimable.. [optional]  # noqa: E501
            status (OmittablePPMDocumentStatus): [optional]  # noqa: E501
            reason (str, none_type): The reason the services counselor has excluded or rejected the item.. [optional]  # noqa: E501
            adjusted_net_weight (int, none_type): Indicates the adjusted net weight of the vehicle. [optional]  # noqa: E501
            net_weight_remarks (str, none_type): Remarks explaining any edits made to the net weight. [optional]  # noqa: E501
            e_tag (str): A hash that should be used as the \"If-Match\" header for any updates.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.ppm_shipment_id = ppm_shipment_id
        self.created_at = created_at
        self.updated_at = updated_at
        self.empty_document_id = empty_document_id
        self.empty_document = empty_document
        self.full_document_id = full_document_id
        self.full_document = full_document
        self.proof_of_trailer_ownership_document_id = proof_of_trailer_ownership_document_id
        self.proof_of_trailer_ownership_document = proof_of_trailer_ownership_document
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, empty_document, full_document, proof_of_trailer_ownership_document, *args, **kwargs):  # noqa: E501
        """WeightTicket - a model defined in OpenAPI

            empty_document (WeightTicketEmptyDocument):
            full_document (WeightTicketFullDocument):
            proof_of_trailer_ownership_document (WeightTicketProofOfTrailerOwnershipDocument):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): ID of this set of weight tickets.. [optional]  # noqa: E501
            vehicle_description (str, none_type): Description of the vehicle used for the trip. E.g. make/model, type of truck/van, etc.. [optional]  # noqa: E501
            empty_weight (int, none_type): Weight of the vehicle when empty.. [optional]  # noqa: E501
            missing_empty_weight_ticket (bool, none_type): Indicates if the customer is missing a weight ticket for the vehicle weight when empty.. [optional]  # noqa: E501
            full_weight (int, none_type): The weight of the vehicle when full.. [optional]  # noqa: E501
            missing_full_weight_ticket (bool, none_type): Indicates if the customer is missing a weight ticket for the vehicle weight when full.. [optional]  # noqa: E501
            owns_trailer (bool, none_type): Indicates if the customer used a trailer they own for the move.. [optional]  # noqa: E501
            trailer_meets_criteria (bool, none_type): Indicates if the trailer that the customer used meets all the criteria to be claimable.. [optional]  # noqa: E501
            status (OmittablePPMDocumentStatus): [optional]  # noqa: E501
            reason (str, none_type): The reason the services counselor has excluded or rejected the item.. [optional]  # noqa: E501
            adjusted_net_weight (int, none_type): Indicates the adjusted net weight of the vehicle. [optional]  # noqa: E501
            net_weight_remarks (str, none_type): Remarks explaining any edits made to the net weight. [optional]  # noqa: E501
            e_tag (str): A hash that should be used as the \"If-Match\" header for any updates.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.empty_document = empty_document
        self.full_document = full_document
        self.proof_of_trailer_ownership_document = proof_of_trailer_ownership_document
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
