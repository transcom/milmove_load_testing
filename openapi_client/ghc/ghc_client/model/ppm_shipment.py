"""
    MilMove GHC API

    The GHC API is a RESTful API that enables the Office application for MilMove.  All endpoints are located under `/ghc/v1`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dp3@truss.works
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ghc_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from ghc_client.exceptions import ApiAttributeError


def lazy_import():
    from ghc_client.model.address import Address
    from ghc_client.model.moving_expense import MovingExpense
    from ghc_client.model.ppm_advance_status import PPMAdvanceStatus
    from ghc_client.model.ppm_shipment_status import PPMShipmentStatus
    from ghc_client.model.pro_gear_weight_ticket import ProGearWeightTicket
    from ghc_client.model.signed_certification import SignedCertification
    from ghc_client.model.weight_tickets import WeightTickets
    globals()['Address'] = Address
    globals()['MovingExpense'] = MovingExpense
    globals()['PPMAdvanceStatus'] = PPMAdvanceStatus
    globals()['PPMShipmentStatus'] = PPMShipmentStatus
    globals()['ProGearWeightTicket'] = ProGearWeightTicket
    globals()['SignedCertification'] = SignedCertification
    globals()['WeightTickets'] = WeightTickets


class PPMShipment(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('pickup_postal_code',): {
            'regex': {
                'pattern': r'^(\d{5})$',  # noqa: E501
            },
        },
        ('destination_postal_code',): {
            'regex': {
                'pattern': r'^(\d{5})$',  # noqa: E501
            },
        },
        ('secondary_pickup_postal_code',): {
            'regex': {
                'pattern': r'^(\d{5})$',  # noqa: E501
            },
        },
        ('actual_pickup_postal_code',): {
            'regex': {
                'pattern': r'^(\d{5})$',  # noqa: E501
            },
        },
        ('secondary_destination_postal_code',): {
            'regex': {
                'pattern': r'^(\d{5})$',  # noqa: E501
            },
        },
        ('actual_destination_postal_code',): {
            'regex': {
                'pattern': r'^(\d{5})$',  # noqa: E501
            },
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = True

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'shipment_id': (str,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'status': (PPMShipmentStatus,),  # noqa: E501
            'expected_departure_date': (date,),  # noqa: E501
            'pickup_postal_code': (str,),  # noqa: E501
            'destination_postal_code': (str,),  # noqa: E501
            'sit_expected': (bool,),  # noqa: E501
            'e_tag': (str,),  # noqa: E501
            'updated_at': (datetime,),  # noqa: E501
            'w2_address': (Address,),  # noqa: E501
            'advance_status': (PPMAdvanceStatus,),  # noqa: E501
            'actual_move_date': (date, none_type,),  # noqa: E501
            'submitted_at': (datetime, none_type,),  # noqa: E501
            'reviewed_at': (datetime, none_type,),  # noqa: E501
            'approved_at': (datetime, none_type,),  # noqa: E501
            'secondary_pickup_postal_code': (str, none_type,),  # noqa: E501
            'actual_pickup_postal_code': (str, none_type,),  # noqa: E501
            'secondary_destination_postal_code': (str, none_type,),  # noqa: E501
            'actual_destination_postal_code': (str, none_type,),  # noqa: E501
            'estimated_weight': (int, none_type,),  # noqa: E501
            'has_pro_gear': (bool, none_type,),  # noqa: E501
            'pro_gear_weight': (int, none_type,),  # noqa: E501
            'spouse_pro_gear_weight': (int, none_type,),  # noqa: E501
            'estimated_incentive': (int, none_type,),  # noqa: E501
            'final_incentive': (int, none_type,),  # noqa: E501
            'has_requested_advance': (bool, none_type,),  # noqa: E501
            'advance_amount_requested': (int, none_type,),  # noqa: E501
            'has_received_advance': (bool, none_type,),  # noqa: E501
            'advance_amount_received': (int, none_type,),  # noqa: E501
            'sit_location': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'sit_estimated_weight': (int, none_type,),  # noqa: E501
            'sit_estimated_entry_date': (date, none_type,),  # noqa: E501
            'sit_estimated_departure_date': (date, none_type,),  # noqa: E501
            'sit_estimated_cost': (int, none_type,),  # noqa: E501
            'weight_tickets': (WeightTickets,),  # noqa: E501
            'moving_expenses': ([MovingExpense],),  # noqa: E501
            'pro_gear_weight_tickets': ([ProGearWeightTicket],),  # noqa: E501
            'signed_certification': (SignedCertification,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'shipment_id': 'shipmentId',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'status': 'status',  # noqa: E501
        'expected_departure_date': 'expectedDepartureDate',  # noqa: E501
        'pickup_postal_code': 'pickupPostalCode',  # noqa: E501
        'destination_postal_code': 'destinationPostalCode',  # noqa: E501
        'sit_expected': 'sitExpected',  # noqa: E501
        'e_tag': 'eTag',  # noqa: E501
        'updated_at': 'updatedAt',  # noqa: E501
        'w2_address': 'w2Address',  # noqa: E501
        'advance_status': 'advanceStatus',  # noqa: E501
        'actual_move_date': 'actualMoveDate',  # noqa: E501
        'submitted_at': 'submittedAt',  # noqa: E501
        'reviewed_at': 'reviewedAt',  # noqa: E501
        'approved_at': 'approvedAt',  # noqa: E501
        'secondary_pickup_postal_code': 'secondaryPickupPostalCode',  # noqa: E501
        'actual_pickup_postal_code': 'actualPickupPostalCode',  # noqa: E501
        'secondary_destination_postal_code': 'secondaryDestinationPostalCode',  # noqa: E501
        'actual_destination_postal_code': 'actualDestinationPostalCode',  # noqa: E501
        'estimated_weight': 'estimatedWeight',  # noqa: E501
        'has_pro_gear': 'hasProGear',  # noqa: E501
        'pro_gear_weight': 'proGearWeight',  # noqa: E501
        'spouse_pro_gear_weight': 'spouseProGearWeight',  # noqa: E501
        'estimated_incentive': 'estimatedIncentive',  # noqa: E501
        'final_incentive': 'finalIncentive',  # noqa: E501
        'has_requested_advance': 'hasRequestedAdvance',  # noqa: E501
        'advance_amount_requested': 'advanceAmountRequested',  # noqa: E501
        'has_received_advance': 'hasReceivedAdvance',  # noqa: E501
        'advance_amount_received': 'advanceAmountReceived',  # noqa: E501
        'sit_location': 'sitLocation',  # noqa: E501
        'sit_estimated_weight': 'sitEstimatedWeight',  # noqa: E501
        'sit_estimated_entry_date': 'sitEstimatedEntryDate',  # noqa: E501
        'sit_estimated_departure_date': 'sitEstimatedDepartureDate',  # noqa: E501
        'sit_estimated_cost': 'sitEstimatedCost',  # noqa: E501
        'weight_tickets': 'weightTickets',  # noqa: E501
        'moving_expenses': 'movingExpenses',  # noqa: E501
        'pro_gear_weight_tickets': 'proGearWeightTickets',  # noqa: E501
        'signed_certification': 'signedCertification',  # noqa: E501
    }

    read_only_vars = {
        'id',  # noqa: E501
        'shipment_id',  # noqa: E501
        'created_at',  # noqa: E501
        'e_tag',  # noqa: E501
        'updated_at',  # noqa: E501
        'final_incentive',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, shipment_id, created_at, status, expected_departure_date, pickup_postal_code, destination_postal_code, sit_expected, e_tag, *args, **kwargs):  # noqa: E501
        """PPMShipment - a model defined in OpenAPI

        Args:
            id (str): Primary auto-generated unique identifier of the PPM shipment object
            shipment_id (str): The id of the parent MTOShipment object
            created_at (datetime): Timestamp of when the PPM Shipment was initially created (UTC)
            status (PPMShipmentStatus):
            expected_departure_date (date): Date the customer expects to begin their move. 
            pickup_postal_code (str): The postal code of the origin location where goods are being moved from.
            destination_postal_code (str): The postal code of the destination location where goods are being delivered to.
            sit_expected (bool): Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.  Must be set to `true` when providing `sitLocation`, `sitEstimatedWeight`, `sitEstimatedEntryDate`, and `sitEstimatedDepartureDate` values to calculate the `sitEstimatedCost`. 
            e_tag (str): A hash unique to this shipment that should be used as the \"If-Match\" header for any updates.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            updated_at (datetime): Timestamp of when a property of this object was last updated (UTC). [optional]  # noqa: E501
            w2_address (Address): [optional]  # noqa: E501
            advance_status (PPMAdvanceStatus): [optional]  # noqa: E501
            actual_move_date (date, none_type): The actual start date of when the PPM shipment left the origin.. [optional]  # noqa: E501
            submitted_at (datetime, none_type): The timestamp of when the customer submitted their PPM documentation to the counselor for review.. [optional]  # noqa: E501
            reviewed_at (datetime, none_type): The timestamp of when the Service Counselor has reviewed all of the closeout documents.. [optional]  # noqa: E501
            approved_at (datetime, none_type): The timestamp of when the shipment was approved and the service member can begin their move.. [optional]  # noqa: E501
            secondary_pickup_postal_code (str, none_type): [optional]  # noqa: E501
            actual_pickup_postal_code (str, none_type): The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment. . [optional]  # noqa: E501
            secondary_destination_postal_code (str, none_type): An optional secondary location near the destination where goods will be dropped off.. [optional]  # noqa: E501
            actual_destination_postal_code (str, none_type): The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment. . [optional]  # noqa: E501
            estimated_weight (int, none_type): The estimated weight of the PPM shipment goods being moved.. [optional]  # noqa: E501
            has_pro_gear (bool, none_type): Indicates whether PPM shipment has pro gear for themselves or their spouse. . [optional]  # noqa: E501
            pro_gear_weight (int, none_type): The estimated weight of the pro-gear being moved belonging to the service member.. [optional]  # noqa: E501
            spouse_pro_gear_weight (int, none_type): The estimated weight of the pro-gear being moved belonging to a spouse.. [optional]  # noqa: E501
            estimated_incentive (int, none_type): The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.. [optional]  # noqa: E501
            final_incentive (int, none_type): The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement. . [optional]  # noqa: E501
            has_requested_advance (bool, none_type): Indicates whether an advance has been requested for the PPM shipment. . [optional]  # noqa: E501
            advance_amount_requested (int, none_type): The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive. . [optional]  # noqa: E501
            has_received_advance (bool, none_type): Indicates whether an advance was received for the PPM shipment. . [optional]  # noqa: E501
            advance_amount_received (int, none_type): The amount received for an advance, or null if no advance is received. . [optional]  # noqa: E501
            sit_location ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]  # noqa: E501
            sit_estimated_weight (int, none_type): The estimated weight of the goods being put into storage.. [optional]  # noqa: E501
            sit_estimated_entry_date (date, none_type): The date that goods will first enter the storage location.. [optional]  # noqa: E501
            sit_estimated_departure_date (date, none_type): The date that goods will exit the storage location.. [optional]  # noqa: E501
            sit_estimated_cost (int, none_type): The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.. [optional]  # noqa: E501
            weight_tickets (WeightTickets): [optional]  # noqa: E501
            moving_expenses ([MovingExpense]): All expense documentation receipt records of this PPM shipment.. [optional]  # noqa: E501
            pro_gear_weight_tickets ([ProGearWeightTicket]): All pro-gear weight ticket documentation records for this PPM shipment.. [optional]  # noqa: E501
            signed_certification (SignedCertification): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.shipment_id = shipment_id
        self.created_at = created_at
        self.status = status
        self.expected_departure_date = expected_departure_date
        self.pickup_postal_code = pickup_postal_code
        self.destination_postal_code = destination_postal_code
        self.sit_expected = sit_expected
        self.e_tag = e_tag
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, status, expected_departure_date, pickup_postal_code, destination_postal_code, sit_expected, *args, **kwargs):  # noqa: E501
        """PPMShipment - a model defined in OpenAPI

            status (PPMShipmentStatus):
            expected_departure_date (date): Date the customer expects to begin their move. 
            pickup_postal_code (str): The postal code of the origin location where goods are being moved from.
            destination_postal_code (str): The postal code of the destination location where goods are being delivered to.
            sit_expected (bool): Captures whether some or all of the PPM shipment will require temporary storage at the origin or destination.  Must be set to `true` when providing `sitLocation`, `sitEstimatedWeight`, `sitEstimatedEntryDate`, and `sitEstimatedDepartureDate` values to calculate the `sitEstimatedCost`. 
        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            updated_at (datetime): Timestamp of when a property of this object was last updated (UTC). [optional]  # noqa: E501
            w2_address (Address): [optional]  # noqa: E501
            advance_status (PPMAdvanceStatus): [optional]  # noqa: E501
            actual_move_date (date, none_type): The actual start date of when the PPM shipment left the origin.. [optional]  # noqa: E501
            submitted_at (datetime, none_type): The timestamp of when the customer submitted their PPM documentation to the counselor for review.. [optional]  # noqa: E501
            reviewed_at (datetime, none_type): The timestamp of when the Service Counselor has reviewed all of the closeout documents.. [optional]  # noqa: E501
            approved_at (datetime, none_type): The timestamp of when the shipment was approved and the service member can begin their move.. [optional]  # noqa: E501
            secondary_pickup_postal_code (str, none_type): [optional]  # noqa: E501
            actual_pickup_postal_code (str, none_type): The actual postal code where the PPM shipment started. To be filled once the customer has moved the shipment. . [optional]  # noqa: E501
            secondary_destination_postal_code (str, none_type): An optional secondary location near the destination where goods will be dropped off.. [optional]  # noqa: E501
            actual_destination_postal_code (str, none_type): The actual postal code where the PPM shipment ended. To be filled once the customer has moved the shipment. . [optional]  # noqa: E501
            estimated_weight (int, none_type): The estimated weight of the PPM shipment goods being moved.. [optional]  # noqa: E501
            has_pro_gear (bool, none_type): Indicates whether PPM shipment has pro gear for themselves or their spouse. . [optional]  # noqa: E501
            pro_gear_weight (int, none_type): The estimated weight of the pro-gear being moved belonging to the service member.. [optional]  # noqa: E501
            spouse_pro_gear_weight (int, none_type): The estimated weight of the pro-gear being moved belonging to a spouse.. [optional]  # noqa: E501
            estimated_incentive (int, none_type): The estimated amount the government will pay the service member to move their belongings based on the moving date, locations, and shipment weight.. [optional]  # noqa: E501
            final_incentive (int, none_type): The final calculated incentive for the PPM shipment. This does not include **SIT** as it is a reimbursement. . [optional]  # noqa: E501
            has_requested_advance (bool, none_type): Indicates whether an advance has been requested for the PPM shipment. . [optional]  # noqa: E501
            advance_amount_requested (int, none_type): The amount requested as an advance by the service member up to a maximum percentage of the estimated incentive. . [optional]  # noqa: E501
            has_received_advance (bool, none_type): Indicates whether an advance was received for the PPM shipment. . [optional]  # noqa: E501
            advance_amount_received (int, none_type): The amount received for an advance, or null if no advance is received. . [optional]  # noqa: E501
            sit_location ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]  # noqa: E501
            sit_estimated_weight (int, none_type): The estimated weight of the goods being put into storage.. [optional]  # noqa: E501
            sit_estimated_entry_date (date, none_type): The date that goods will first enter the storage location.. [optional]  # noqa: E501
            sit_estimated_departure_date (date, none_type): The date that goods will exit the storage location.. [optional]  # noqa: E501
            sit_estimated_cost (int, none_type): The estimated amount that the government will pay the service member to put their goods into storage. This estimated storage cost is separate from the estimated incentive.. [optional]  # noqa: E501
            weight_tickets (WeightTickets): [optional]  # noqa: E501
            moving_expenses ([MovingExpense]): All expense documentation receipt records of this PPM shipment.. [optional]  # noqa: E501
            pro_gear_weight_tickets ([ProGearWeightTicket]): All pro-gear weight ticket documentation records for this PPM shipment.. [optional]  # noqa: E501
            signed_certification (SignedCertification): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.status = status
        self.expected_departure_date = expected_departure_date
        self.pickup_postal_code = pickup_postal_code
        self.destination_postal_code = destination_postal_code
        self.sit_expected = sit_expected
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
