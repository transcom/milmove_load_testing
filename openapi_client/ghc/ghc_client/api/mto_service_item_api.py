"""
    MilMove GHC API

    The GHC API is a RESTful API that enables the Office application for MilMove.  All endpoints are located under `/ghc/v1`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: milmove-developers@caci.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ghc_client.api_client import ApiClient, Endpoint as _Endpoint
from ghc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ghc_client.model.error import Error
from ghc_client.model.mto_service_item import MTOServiceItem
from ghc_client.model.mto_service_item_single import MTOServiceItemSingle
from ghc_client.model.mto_service_items import MTOServiceItems
from ghc_client.model.mto_shipment import MTOShipment
from ghc_client.model.patch_mto_service_item_status_payload import PatchMTOServiceItemStatusPayload
from ghc_client.model.service_item_sit_entry_date import ServiceItemSitEntryDate
from ghc_client.model.update_sit_service_item_customer_expense import UpdateSITServiceItemCustomerExpense
from ghc_client.model.validation_error import ValidationError


class MtoServiceItemApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_mto_service_item_endpoint = _Endpoint(
            settings={
                'response_type': (MTOServiceItemSingle,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}',
                'operation_id': 'get_mto_service_item',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                    'mto_service_item_id',
                ],
                'required': [
                    'move_task_order_id',
                    'mto_service_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                    'mto_service_item_id':
                        (str,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                    'mto_service_item_id': 'mtoServiceItemID',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                    'mto_service_item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_mto_service_items_endpoint = _Endpoint(
            settings={
                'response_type': (MTOServiceItems,),
                'auth': [],
                'endpoint_path': '/move_task_orders/{moveTaskOrderID}/mto_service_items',
                'operation_id': 'list_mto_service_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                ],
                'required': [
                    'move_task_order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_mto_service_item_status_endpoint = _Endpoint(
            settings={
                'response_type': (MTOServiceItem,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/service-items/{mtoServiceItemID}/status',
                'operation_id': 'update_mto_service_item_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                    'mto_service_item_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'move_task_order_id',
                    'mto_service_item_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                    'mto_service_item_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (PatchMTOServiceItemStatusPayload,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                    'mto_service_item_id': 'mtoServiceItemID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                    'mto_service_item_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_service_item_sit_entry_date_endpoint = _Endpoint(
            settings={
                'response_type': (MTOServiceItemSingle,),
                'auth': [],
                'endpoint_path': '/service-item/{mtoServiceItemID}/entry-date-update',
                'operation_id': 'update_service_item_sit_entry_date',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_service_item_id',
                    'body',
                ],
                'required': [
                    'mto_service_item_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_service_item_id':
                        (str,),
                    'body':
                        (ServiceItemSitEntryDate,),
                },
                'attribute_map': {
                    'mto_service_item_id': 'mtoServiceItemID',
                },
                'location_map': {
                    'mto_service_item_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_sit_service_item_customer_expense_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/sit-service-item/convert-to-customer-expense',
                'operation_id': 'update_sit_service_item_customer_expense',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateSITServiceItemCustomerExpense,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_mto_service_item(
        self,
        move_task_order_id,
        mto_service_item_id,
        **kwargs
    ):
        """Gets a line item by ID for a move by ID  # noqa: E501

        Gets a line item by ID for a move by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mto_service_item(move_task_order_id, mto_service_item_id, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use
            mto_service_item_id (str): ID of line item to use

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOServiceItemSingle
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        kwargs['mto_service_item_id'] = \
            mto_service_item_id
        return self.get_mto_service_item_endpoint.call_with_http_info(**kwargs)

    def list_mto_service_items(
        self,
        move_task_order_id,
        **kwargs
    ):
        """Gets all line items for a move  # noqa: E501

        Gets all line items for a move  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_mto_service_items(move_task_order_id, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move for mto service item to use

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOServiceItems
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        return self.list_mto_service_items_endpoint.call_with_http_info(**kwargs)

    def update_mto_service_item_status(
        self,
        move_task_order_id,
        mto_service_item_id,
        if_match,
        body,
        **kwargs
    ):
        """Change the status of a line item for a move by ID  # noqa: E501

        Changes the status of a line item for a move by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_service_item_status(move_task_order_id, mto_service_item_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use
            mto_service_item_id (str): ID of line item to use
            if_match (str):
            body (PatchMTOServiceItemStatusPayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOServiceItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        kwargs['mto_service_item_id'] = \
            mto_service_item_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_mto_service_item_status_endpoint.call_with_http_info(**kwargs)

    def update_service_item_sit_entry_date(
        self,
        mto_service_item_id,
        body,
        **kwargs
    ):
        """Updates a service item's SIT entry date by ID  # noqa: E501

        Locates the service item in the database and updates the SIT entry date for the selected service item and returns the service item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_service_item_sit_entry_date(mto_service_item_id, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_service_item_id (str): ID of the service item
            body (ServiceItemSitEntryDate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOServiceItemSingle
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_service_item_id'] = \
            mto_service_item_id
        kwargs['body'] = \
            body
        return self.update_service_item_sit_entry_date_endpoint.call_with_http_info(**kwargs)

    def update_sit_service_item_customer_expense(
        self,
        shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """Converts a SIT to customer expense  # noqa: E501

        Converts a SIT to customer expense  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_sit_service_item_customer_expense(shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):
            body (UpdateSITServiceItemCustomerExpense):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_sit_service_item_customer_expense_endpoint.call_with_http_info(**kwargs)

