"""
    MilMove GHC API

    The GHC API is a RESTful API that enables the Office application for MilMove.  All endpoints are located under `/ghc/v1`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: milmove-developers@caci.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ghc_client.api_client import ApiClient, Endpoint as _Endpoint
from ghc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ghc_client.model.error import Error
from ghc_client.model.moving_expense import MovingExpense
from ghc_client.model.ppm_actual_weight import PPMActualWeight
from ghc_client.model.ppm_closeout import PPMCloseout
from ghc_client.model.ppm_documents import PPMDocuments
from ghc_client.model.ppmsit_estimated_cost import PPMSITEstimatedCost
from ghc_client.model.ppm_shipment import PPMShipment
from ghc_client.model.ppm_shipment_sit import PPMShipmentSIT
from ghc_client.model.pro_gear_weight_ticket import ProGearWeightTicket
from ghc_client.model.update_moving_expense import UpdateMovingExpense
from ghc_client.model.update_pro_gear_weight_ticket import UpdateProGearWeightTicket
from ghc_client.model.update_weight_ticket import UpdateWeightTicket
from ghc_client.model.validation_error import ValidationError
from ghc_client.model.weight_ticket import WeightTicket


class PpmApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.finish_document_review_endpoint = _Endpoint(
            settings={
                'response_type': (PPMShipment,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/finish-document-review',
                'operation_id': 'finish_document_review',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                    'if_match',
                ],
                'required': [
                    'ppm_shipment_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ppm_actual_weight_endpoint = _Endpoint(
            settings={
                'response_type': (PPMActualWeight,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/actual-weight',
                'operation_id': 'get_ppm_actual_weight',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                ],
                'required': [
                    'ppm_shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ppm_closeout_endpoint = _Endpoint(
            settings={
                'response_type': (PPMCloseout,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/closeout',
                'operation_id': 'get_ppm_closeout',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                ],
                'required': [
                    'ppm_shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ppm_documents_endpoint = _Endpoint(
            settings={
                'response_type': (PPMDocuments,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/ppm-documents',
                'operation_id': 'get_ppm_documents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                ],
                'required': [
                    'shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                },
                'location_map': {
                    'shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ppmsit_estimated_cost_endpoint = _Endpoint(
            settings={
                'response_type': (PPMSITEstimatedCost,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/sit_location/{sitLocation}/sit-estimated-cost',
                'operation_id': 'get_ppmsit_estimated_cost',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                    'sit_location',
                    'sit_entry_date',
                    'sit_departure_date',
                    'weight_stored',
                ],
                'required': [
                    'ppm_shipment_id',
                    'sit_location',
                    'sit_entry_date',
                    'sit_departure_date',
                    'weight_stored',
                ],
                'nullable': [
                ],
                'enum': [
                    'sit_location',
                ],
                'validation': [
                    'weight_stored',
                ]
            },
            root_map={
                'validations': {
                    ('weight_stored',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('sit_location',): {

                        "ORIGIN": "ORIGIN",
                        "DESTINATION": "DESTINATION"
                    },
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                    'sit_location':
                        (str,),
                    'sit_entry_date':
                        (datetime,),
                    'sit_departure_date':
                        (datetime,),
                    'weight_stored':
                        (int,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                    'sit_location': 'sitLocation',
                    'sit_entry_date': 'sitEntryDate',
                    'sit_departure_date': 'sitDepartureDate',
                    'weight_stored': 'weightStored',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                    'sit_location': 'path',
                    'sit_entry_date': 'query',
                    'sit_departure_date': 'query',
                    'weight_stored': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.show_aoa_packet_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/aoa-packet',
                'operation_id': 'show_aoa_packet',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                ],
                'required': [
                    'ppm_shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.show_payment_packet_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/payment-packet',
                'operation_id': 'show_payment_packet',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                ],
                'required': [
                    'ppm_shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_moving_expense_endpoint = _Endpoint(
            settings={
                'response_type': (MovingExpense,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/moving-expenses/{movingExpenseId}',
                'operation_id': 'update_moving_expense',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                    'moving_expense_id',
                    'if_match',
                    'update_moving_expense',
                ],
                'required': [
                    'ppm_shipment_id',
                    'moving_expense_id',
                    'if_match',
                    'update_moving_expense',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                    'moving_expense_id':
                        (str,),
                    'if_match':
                        (str,),
                    'update_moving_expense':
                        (UpdateMovingExpense,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                    'moving_expense_id': 'movingExpenseId',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                    'moving_expense_id': 'path',
                    'if_match': 'header',
                    'update_moving_expense': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_ppmsit_endpoint = _Endpoint(
            settings={
                'response_type': (PPMShipment,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/ppm-sit',
                'operation_id': 'update_ppmsit',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'ppm_shipment_id',
                    'if_match',
                ],
                'nullable': [
                    'body',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (PPMShipmentSIT,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_pro_gear_weight_ticket_endpoint = _Endpoint(
            settings={
                'response_type': (ProGearWeightTicket,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/pro-gear-weight-tickets/{proGearWeightTicketId}',
                'operation_id': 'update_pro_gear_weight_ticket',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                    'pro_gear_weight_ticket_id',
                    'if_match',
                    'update_pro_gear_weight_ticket',
                ],
                'required': [
                    'ppm_shipment_id',
                    'pro_gear_weight_ticket_id',
                    'if_match',
                    'update_pro_gear_weight_ticket',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                    'pro_gear_weight_ticket_id':
                        (str,),
                    'if_match':
                        (str,),
                    'update_pro_gear_weight_ticket':
                        (UpdateProGearWeightTicket,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                    'pro_gear_weight_ticket_id': 'proGearWeightTicketId',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                    'pro_gear_weight_ticket_id': 'path',
                    'if_match': 'header',
                    'update_pro_gear_weight_ticket': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_weight_ticket_endpoint = _Endpoint(
            settings={
                'response_type': (WeightTicket,),
                'auth': [],
                'endpoint_path': '/ppm-shipments/{ppmShipmentId}/weight-ticket/{weightTicketId}',
                'operation_id': 'update_weight_ticket',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'ppm_shipment_id',
                    'weight_ticket_id',
                    'if_match',
                    'update_weight_ticket_payload',
                ],
                'required': [
                    'ppm_shipment_id',
                    'weight_ticket_id',
                    'if_match',
                    'update_weight_ticket_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ppm_shipment_id':
                        (str,),
                    'weight_ticket_id':
                        (str,),
                    'if_match':
                        (str,),
                    'update_weight_ticket_payload':
                        (UpdateWeightTicket,),
                },
                'attribute_map': {
                    'ppm_shipment_id': 'ppmShipmentId',
                    'weight_ticket_id': 'weightTicketId',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'ppm_shipment_id': 'path',
                    'weight_ticket_id': 'path',
                    'if_match': 'header',
                    'update_weight_ticket_payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def finish_document_review(
        self,
        ppm_shipment_id,
        if_match,
        **kwargs
    ):
        """Updates a PPM shipment's status after document review  # noqa: E501

        Updates a PPM shipment's status once documents have been reviewed. Status is updated depending on whether any documents have been rejected.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.finish_document_review(ppm_shipment_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PPMShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        kwargs['if_match'] = \
            if_match
        return self.finish_document_review_endpoint.call_with_http_info(**kwargs)

    def get_ppm_actual_weight(
        self,
        ppm_shipment_id,
        **kwargs
    ):
        """Get the actual weight for a PPM shipment  # noqa: E501

        Retrieves the actual weight for the specified PPM shipment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ppm_actual_weight(ppm_shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PPMActualWeight
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        return self.get_ppm_actual_weight_endpoint.call_with_http_info(**kwargs)

    def get_ppm_closeout(
        self,
        ppm_shipment_id,
        **kwargs
    ):
        """Get the closeout calcuations for the specified PPM shipment  # noqa: E501

        Retrieves the closeout calculations for the specified PPM shipment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ppm_closeout(ppm_shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PPMCloseout
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        return self.get_ppm_closeout_endpoint.call_with_http_info(**kwargs)

    def get_ppm_documents(
        self,
        shipment_id,
        **kwargs
    ):
        """Gets all the PPM documents for a PPM shipment  # noqa: E501

        Retrieves all of the documents and associated uploads for each ppm document type connected to a PPM shipment. This excludes any deleted PPM documents.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ppm_documents(shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PPMDocuments
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        return self.get_ppm_documents_endpoint.call_with_http_info(**kwargs)

    def get_ppmsit_estimated_cost(
        self,
        ppm_shipment_id,
        sit_location,
        sit_entry_date,
        sit_departure_date,
        weight_stored,
        **kwargs
    ):
        """Get the SIT estimated cost for a PPM shipment  # noqa: E501

        Calculates and returns the SIT estimated cost for the specified PPM shipment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ppmsit_estimated_cost(ppm_shipment_id, sit_location, sit_entry_date, sit_departure_date, weight_stored, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment
            sit_location (str): location of sit
            sit_entry_date (datetime): Date entered into SIT
            sit_departure_date (datetime): Date departed SIT
            weight_stored (int): Weight stored in SIT

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PPMSITEstimatedCost
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        kwargs['sit_location'] = \
            sit_location
        kwargs['sit_entry_date'] = \
            sit_entry_date
        kwargs['sit_departure_date'] = \
            sit_departure_date
        kwargs['weight_stored'] = \
            weight_stored
        return self.get_ppmsit_estimated_cost_endpoint.call_with_http_info(**kwargs)

    def show_aoa_packet(
        self,
        ppm_shipment_id,
        **kwargs
    ):
        """Downloads AOA Packet form PPMShipment as a PDF  # noqa: E501

        ### Functionality This endpoint downloads all uploaded move order documentation combined with the Shipment Summary Worksheet into a single PDF. ### Errors * The PPMShipment must have requested an AOA. * The PPMShipment AOA Request must have been approved.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_aoa_packet(ppm_shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): the id for the ppmshipment with aoa to be downloaded

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        return self.show_aoa_packet_endpoint.call_with_http_info(**kwargs)

    def show_payment_packet(
        self,
        ppm_shipment_id,
        **kwargs
    ):
        """Returns PPM payment packet  # noqa: E501

        Generates a PDF containing all user uploaded documentations for PPM. Contains SSW form, orders, weight and expense documentations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_payment_packet(ppm_shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the ppmShipment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        return self.show_payment_packet_endpoint.call_with_http_info(**kwargs)

    def update_moving_expense(
        self,
        ppm_shipment_id,
        moving_expense_id,
        if_match,
        update_moving_expense,
        **kwargs
    ):
        """Updates the moving expense  # noqa: E501

        Updates a PPM shipment's moving expense with new information. Only some of the moving expense's fields are editable because some have to be set by the customer, e.g. the description and the moving expense type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_moving_expense(ppm_shipment_id, moving_expense_id, if_match, update_moving_expense, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment
            moving_expense_id (str): UUID of the moving expense
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            update_moving_expense (UpdateMovingExpense):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MovingExpense
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        kwargs['moving_expense_id'] = \
            moving_expense_id
        kwargs['if_match'] = \
            if_match
        kwargs['update_moving_expense'] = \
            update_moving_expense
        return self.update_moving_expense_endpoint.call_with_http_info(**kwargs)

    def update_ppmsit(
        self,
        ppm_shipment_id,
        if_match,
        **kwargs
    ):
        """Updates a PPM shipment's SIT values  # noqa: E501

        Updates a PPM shipment's SIT values   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ppmsit(ppm_shipment_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment
            if_match (str):

        Keyword Args:
            body (PPMShipmentSIT): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PPMShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        kwargs['if_match'] = \
            if_match
        return self.update_ppmsit_endpoint.call_with_http_info(**kwargs)

    def update_pro_gear_weight_ticket(
        self,
        ppm_shipment_id,
        pro_gear_weight_ticket_id,
        if_match,
        update_pro_gear_weight_ticket,
        **kwargs
    ):
        """Updates a pro-gear weight ticket  # noqa: E501

        Updates a PPM shipment's pro-gear weight ticket with new information. Only some of the fields are editable because some have to be set by the customer, e.g. the description.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pro_gear_weight_ticket(ppm_shipment_id, pro_gear_weight_ticket_id, if_match, update_pro_gear_weight_ticket, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment
            pro_gear_weight_ticket_id (str): UUID of the pro-gear weight ticket
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            update_pro_gear_weight_ticket (UpdateProGearWeightTicket):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ProGearWeightTicket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        kwargs['pro_gear_weight_ticket_id'] = \
            pro_gear_weight_ticket_id
        kwargs['if_match'] = \
            if_match
        kwargs['update_pro_gear_weight_ticket'] = \
            update_pro_gear_weight_ticket
        return self.update_pro_gear_weight_ticket_endpoint.call_with_http_info(**kwargs)

    def update_weight_ticket(
        self,
        ppm_shipment_id,
        weight_ticket_id,
        if_match,
        update_weight_ticket_payload,
        **kwargs
    ):
        """Updates a weight ticket document  # noqa: E501

        Updates a PPM shipment's weight ticket document with new information. Only some of the weight ticket document's fields are editable because some have to be set by the customer, e.g. vehicle description.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_weight_ticket(ppm_shipment_id, weight_ticket_id, if_match, update_weight_ticket_payload, async_req=True)
        >>> result = thread.get()

        Args:
            ppm_shipment_id (str): UUID of the PPM shipment
            weight_ticket_id (str): UUID of the weight ticket
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            update_weight_ticket_payload (UpdateWeightTicket):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WeightTicket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ppm_shipment_id'] = \
            ppm_shipment_id
        kwargs['weight_ticket_id'] = \
            weight_ticket_id
        kwargs['if_match'] = \
            if_match
        kwargs['update_weight_ticket_payload'] = \
            update_weight_ticket_payload
        return self.update_weight_ticket_endpoint.call_with_http_info(**kwargs)

