"""
    MilMove GHC API

    The GHC API is a RESTful API that enables the Office application for MilMove.  All endpoints are located under `/ghc/v1`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: milmove-developers@caci.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ghc_client.api_client import ApiClient, Endpoint as _Endpoint
from ghc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ghc_client.model.approve_sit_extension import ApproveSITExtension
from ghc_client.model.create_approved_sit_duration_update import CreateApprovedSITDurationUpdate
from ghc_client.model.deny_sit_extension import DenySITExtension
from ghc_client.model.error import Error
from ghc_client.model.mto_shipment import MTOShipment
from ghc_client.model.reject_shipment import RejectShipment
from ghc_client.model.request_diversion import RequestDiversion
from ghc_client.model.review_shipment_address_update_request import ReviewShipmentAddressUpdateRequest
from ghc_client.model.reweigh import Reweigh
from ghc_client.model.shipment_address_update import ShipmentAddressUpdate
from ghc_client.model.update_sit_service_item_customer_expense import UpdateSITServiceItemCustomerExpense
from ghc_client.model.validation_error import ValidationError


class ShipmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.approve_shipment_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/approve',
                'operation_id': 'approve_shipment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.approve_shipment_diversion_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/approve-diversion',
                'operation_id': 'approve_shipment_diversion',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.approve_sit_extension_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/approve',
                'operation_id': 'approve_sit_extension',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'sit_extension_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'sit_extension_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'sit_extension_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (ApproveSITExtension,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'sit_extension_id': 'sitExtensionID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'sit_extension_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_approved_sit_duration_update_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/sit-extensions',
                'operation_id': 'create_approved_sit_duration_update',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (CreateApprovedSITDurationUpdate,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_shipment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}',
                'operation_id': 'delete_shipment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                ],
                'required': [
                    'shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                },
                'location_map': {
                    'shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.deny_sit_extension_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/sit-extensions/{sitExtensionID}/deny',
                'operation_id': 'deny_sit_extension',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'sit_extension_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'sit_extension_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'sit_extension_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (DenySITExtension,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'sit_extension_id': 'sitExtensionID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'sit_extension_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.reject_shipment_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/reject',
                'operation_id': 'reject_shipment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (RejectShipment,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.request_shipment_cancellation_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/request-cancellation',
                'operation_id': 'request_shipment_cancellation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.request_shipment_diversion_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/request-diversion',
                'operation_id': 'request_shipment_diversion',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (RequestDiversion,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.request_shipment_reweigh_endpoint = _Endpoint(
            settings={
                'response_type': (Reweigh,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/request-reweigh',
                'operation_id': 'request_shipment_reweigh',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                ],
                'required': [
                    'shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                },
                'location_map': {
                    'shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.review_shipment_address_update_endpoint = _Endpoint(
            settings={
                'response_type': (ShipmentAddressUpdate,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/review-shipment-address-update',
                'operation_id': 'review_shipment_address_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (ReviewShipmentAddressUpdateRequest,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_sit_service_item_customer_expense_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/shipments/{shipmentID}/sit-service-item/convert-to-customer-expense',
                'operation_id': 'update_sit_service_item_customer_expense',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateSITServiceItemCustomerExpense,),
                },
                'attribute_map': {
                    'shipment_id': 'shipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def approve_shipment(
        self,
        shipment_id,
        if_match,
        **kwargs
    ):
        """Approves a shipment  # noqa: E501

        Approves a shipment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.approve_shipment(shipment_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        return self.approve_shipment_endpoint.call_with_http_info(**kwargs)

    def approve_shipment_diversion(
        self,
        shipment_id,
        if_match,
        **kwargs
    ):
        """Approves a shipment diversion  # noqa: E501

        Approves a shipment diversion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.approve_shipment_diversion(shipment_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        return self.approve_shipment_diversion_endpoint.call_with_http_info(**kwargs)

    def approve_sit_extension(
        self,
        shipment_id,
        sit_extension_id,
        if_match,
        body,
        **kwargs
    ):
        """Approves a SIT extension  # noqa: E501

        Approves a SIT extension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.approve_sit_extension(shipment_id, sit_extension_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            sit_extension_id (str): ID of the SIT extension
            if_match (str): We want the shipment's eTag rather than the SIT extension eTag as the SIT extension is always associated with a shipment
            body (ApproveSITExtension):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['sit_extension_id'] = \
            sit_extension_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.approve_sit_extension_endpoint.call_with_http_info(**kwargs)

    def create_approved_sit_duration_update(
        self,
        shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """Create an approved SIT Duration Update  # noqa: E501

        TOO can creates an already-approved SIT Duration Update on behalf of a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_approved_sit_duration_update(shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str): We want the shipment's eTag rather than the SIT Duration Update eTag as the SIT Duration Update is always associated with a shipment
            body (CreateApprovedSITDurationUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.create_approved_sit_duration_update_endpoint.call_with_http_info(**kwargs)

    def delete_shipment(
        self,
        shipment_id,
        **kwargs
    ):
        """Soft deletes a shipment by ID  # noqa: E501

        Soft deletes a shipment by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shipment(shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment to be deleted

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        return self.delete_shipment_endpoint.call_with_http_info(**kwargs)

    def deny_sit_extension(
        self,
        shipment_id,
        sit_extension_id,
        if_match,
        body,
        **kwargs
    ):
        """Denies a SIT extension  # noqa: E501

        Denies a SIT extension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deny_sit_extension(shipment_id, sit_extension_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            sit_extension_id (str): ID of the SIT extension
            if_match (str):
            body (DenySITExtension):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['sit_extension_id'] = \
            sit_extension_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.deny_sit_extension_endpoint.call_with_http_info(**kwargs)

    def reject_shipment(
        self,
        shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """rejects a shipment  # noqa: E501

        rejects a shipment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reject_shipment(shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):
            body (RejectShipment):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.reject_shipment_endpoint.call_with_http_info(**kwargs)

    def request_shipment_cancellation(
        self,
        shipment_id,
        if_match,
        **kwargs
    ):
        """Requests a shipment cancellation  # noqa: E501

        Requests a shipment cancellation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.request_shipment_cancellation(shipment_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        return self.request_shipment_cancellation_endpoint.call_with_http_info(**kwargs)

    def request_shipment_diversion(
        self,
        shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """Requests a shipment diversion  # noqa: E501

        Requests a shipment diversion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.request_shipment_diversion(shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):
            body (RequestDiversion):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.request_shipment_diversion_endpoint.call_with_http_info(**kwargs)

    def request_shipment_reweigh(
        self,
        shipment_id,
        **kwargs
    ):
        """Requests a shipment reweigh  # noqa: E501

        Requests a shipment reweigh  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.request_shipment_reweigh(shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Reweigh
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        return self.request_shipment_reweigh_endpoint.call_with_http_info(**kwargs)

    def review_shipment_address_update(
        self,
        shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """Allows TOO to review a shipment address update  # noqa: E501

        This endpoint is used to approve a address update request. Office remarks are required. Approving the address update will update the Destination Final Address of the associated service item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.review_shipment_address_update(shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):
            body (ReviewShipmentAddressUpdateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ShipmentAddressUpdate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.review_shipment_address_update_endpoint.call_with_http_info(**kwargs)

    def update_sit_service_item_customer_expense(
        self,
        shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """Converts a SIT to customer expense  # noqa: E501

        Converts a SIT to customer expense  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_sit_service_item_customer_expense(shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            shipment_id (str): ID of the shipment
            if_match (str):
            body (UpdateSITServiceItemCustomerExpense):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['shipment_id'] = \
            shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_sit_service_item_customer_expense_endpoint.call_with_http_info(**kwargs)

