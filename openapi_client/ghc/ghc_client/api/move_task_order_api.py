"""
    MilMove GHC API

    The GHC API is a RESTful API that enables the Office application for MilMove.  All endpoints are located under `/ghc/v1`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: milmove-developers@caci.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ghc_client.api_client import ApiClient, Endpoint as _Endpoint
from ghc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ghc_client.model.entitlements import Entitlements
from ghc_client.model.error import Error
from ghc_client.model.mto_approval_service_item_codes import MTOApprovalServiceItemCodes
from ghc_client.model.move import Move
from ghc_client.model.move_task_order import MoveTaskOrder
from ghc_client.model.validation_error import ValidationError


class MoveTaskOrderApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_entitlements_endpoint = _Endpoint(
            settings={
                'response_type': (Entitlements,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/entitlements',
                'operation_id': 'get_entitlements',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                ],
                'required': [
                    'move_task_order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_move_task_order_endpoint = _Endpoint(
            settings={
                'response_type': (MoveTaskOrder,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}',
                'operation_id': 'get_move_task_order',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                ],
                'required': [
                    'move_task_order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_move_task_order_status_endpoint = _Endpoint(
            settings={
                'response_type': (Move,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/status',
                'operation_id': 'update_move_task_order_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                    'if_match',
                    'service_item_codes',
                ],
                'required': [
                    'move_task_order_id',
                    'if_match',
                    'service_item_codes',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'service_item_codes':
                        (MTOApprovalServiceItemCodes,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                    'if_match': 'header',
                    'service_item_codes': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_move_tio_remarks_endpoint = _Endpoint(
            settings={
                'response_type': (Move,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/tio-remarks',
                'operation_id': 'update_move_tio_remarks',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'move_task_order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (Move,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_mto_reviewed_billable_weights_at_endpoint = _Endpoint(
            settings={
                'response_type': (Move,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/billable-weights-reviewed-at',
                'operation_id': 'update_mto_reviewed_billable_weights_at',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                    'if_match',
                ],
                'required': [
                    'move_task_order_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_mto_status_service_counseling_completed_endpoint = _Endpoint(
            settings={
                'response_type': (Move,),
                'auth': [],
                'endpoint_path': '/move-task-orders/{moveTaskOrderID}/status/service-counseling-completed',
                'operation_id': 'update_mto_status_service_counseling_completed',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'move_task_order_id',
                    'if_match',
                ],
                'required': [
                    'move_task_order_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'move_task_order_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'move_task_order_id': 'moveTaskOrderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'move_task_order_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_entitlements(
        self,
        move_task_order_id,
        **kwargs
    ):
        """Gets entitlements for a move by ID  # noqa: E501

        Gets entitlements  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_entitlements(move_task_order_id, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Entitlements
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        return self.get_entitlements_endpoint.call_with_http_info(**kwargs)

    def get_move_task_order(
        self,
        move_task_order_id,
        **kwargs
    ):
        """Gets a move by ID  # noqa: E501

        Gets a move  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_move_task_order(move_task_order_id, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MoveTaskOrder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        return self.get_move_task_order_endpoint.call_with_http_info(**kwargs)

    def update_move_task_order_status(
        self,
        move_task_order_id,
        if_match,
        service_item_codes,
        **kwargs
    ):
        """Change the status of a move task order to make it available to prime  # noqa: E501

        Changes move task order status to make it available to prime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_move_task_order_status(move_task_order_id, if_match, service_item_codes, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use
            if_match (str):
            service_item_codes (MTOApprovalServiceItemCodes):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Move
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        kwargs['if_match'] = \
            if_match
        kwargs['service_item_codes'] = \
            service_item_codes
        return self.update_move_task_order_status_endpoint.call_with_http_info(**kwargs)

    def update_move_tio_remarks(
        self,
        move_task_order_id,
        if_match,
        body,
        **kwargs
    ):
        """update_move_tio_remarks  # noqa: E501

        Changes move (move task order) billableWeightsReviewedAt field to a timestamp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_move_tio_remarks(move_task_order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use
            if_match (str):
            body (Move):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Move
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_move_tio_remarks_endpoint.call_with_http_info(**kwargs)

    def update_mto_reviewed_billable_weights_at(
        self,
        move_task_order_id,
        if_match,
        **kwargs
    ):
        """update_mto_reviewed_billable_weights_at  # noqa: E501

        Changes move (move task order) billableWeightsReviewedAt field to a timestamp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_reviewed_billable_weights_at(move_task_order_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Move
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        kwargs['if_match'] = \
            if_match
        return self.update_mto_reviewed_billable_weights_at_endpoint.call_with_http_info(**kwargs)

    def update_mto_status_service_counseling_completed(
        self,
        move_task_order_id,
        if_match,
        **kwargs
    ):
        """Changes move (move task order) status to service counseling completed  # noqa: E501

        Changes move (move task order) status to service counseling completed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_status_service_counseling_completed(move_task_order_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            move_task_order_id (str): ID of move to use
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Move
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['move_task_order_id'] = \
            move_task_order_id
        kwargs['if_match'] = \
            if_match
        return self.update_mto_status_service_counseling_completed_endpoint.call_with_http_info(**kwargs)

