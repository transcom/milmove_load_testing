"""
    move.mil API

    The API for move.mil  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dp3@truss.works
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ghc_client.api_client import ApiClient, Endpoint as _Endpoint
from ghc_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ghc_client.model.counseling_update_allowance_payload import CounselingUpdateAllowancePayload
from ghc_client.model.counseling_update_order_payload import CounselingUpdateOrderPayload
from ghc_client.model.error import Error
from ghc_client.model.move import Move
from ghc_client.model.order import Order
from ghc_client.model.tac_valid import TacValid
from ghc_client.model.update_allowance_payload import UpdateAllowancePayload
from ghc_client.model.update_billable_weight_payload import UpdateBillableWeightPayload
from ghc_client.model.update_max_billable_weight_as_tio_payload import UpdateMaxBillableWeightAsTIOPayload
from ghc_client.model.update_order_payload import UpdateOrderPayload
from ghc_client.model.validation_error import ValidationError


class OrderApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.acknowledge_excess_weight_risk_endpoint = _Endpoint(
            settings={
                'response_type': (Move,),
                'auth': [],
                'endpoint_path': '/orders/{orderID}/acknowledge-excess-weight-risk',
                'operation_id': 'acknowledge_excess_weight_risk',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                ],
                'required': [
                    'order_id',
                    'if_match',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.counseling_update_allowance_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/counseling/orders/{orderID}/allowances',
                'operation_id': 'counseling_update_allowance',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (CounselingUpdateAllowancePayload,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.counseling_update_order_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/counseling/orders/{orderID}',
                'operation_id': 'counseling_update_order',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (CounselingUpdateOrderPayload,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_order_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/orders/{orderID}',
                'operation_id': 'get_order',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                ],
                'required': [
                    'order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                },
                'location_map': {
                    'order_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.tac_validation_endpoint = _Endpoint(
            settings={
                'response_type': (TacValid,),
                'auth': [],
                'endpoint_path': '/tac/valid',
                'operation_id': 'tac_validation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tac',
                ],
                'required': [
                    'tac',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tac':
                        (str,),
                },
                'attribute_map': {
                    'tac': 'tac',
                },
                'location_map': {
                    'tac': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_allowance_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/orders/{orderID}/allowances',
                'operation_id': 'update_allowance',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateAllowancePayload,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_billable_weight_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/orders/{orderID}/update-billable-weight',
                'operation_id': 'update_billable_weight',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateBillableWeightPayload,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_max_billable_weight_as_tio_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/orders/{orderID}/update-max-billable-weight/tio',
                'operation_id': 'update_max_billable_weight_as_tio',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateMaxBillableWeightAsTIOPayload,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_order_endpoint = _Endpoint(
            settings={
                'response_type': (Order,),
                'auth': [],
                'endpoint_path': '/orders/{orderID}',
                'operation_id': 'update_order',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'order_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateOrderPayload,),
                },
                'attribute_map': {
                    'order_id': 'orderID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'order_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def acknowledge_excess_weight_risk(
        self,
        order_id,
        if_match,
        **kwargs
    ):
        """Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert  # noqa: E501

        Saves the date and time a TOO acknowledged the excess weight risk by dismissing the alert  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.acknowledge_excess_weight_risk(order_id, if_match, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use
            if_match (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Move
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        return self.acknowledge_excess_weight_risk_endpoint.call_with_http_info(**kwargs)

    def counseling_update_allowance(
        self,
        order_id,
        if_match,
        body,
        **kwargs
    ):
        """Updates an allowance (Orders with Entitlements)  # noqa: E501

        All fields sent in this request will be set on the order referenced  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counseling_update_allowance(order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use
            if_match (str):
            body (CounselingUpdateAllowancePayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.counseling_update_allowance_endpoint.call_with_http_info(**kwargs)

    def counseling_update_order(
        self,
        order_id,
        if_match,
        body,
        **kwargs
    ):
        """Updates an order (performed by a services counselor)  # noqa: E501

        All fields sent in this request will be set on the order referenced  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.counseling_update_order(order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to update
            if_match (str):
            body (CounselingUpdateOrderPayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.counseling_update_order_endpoint.call_with_http_info(**kwargs)

    def get_order(
        self,
        order_id,
        **kwargs
    ):
        """Gets an order by ID  # noqa: E501

        Gets an order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_order(order_id, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        return self.get_order_endpoint.call_with_http_info(**kwargs)

    def tac_validation(
        self,
        tac,
        **kwargs
    ):
        """Validation of a TAC value  # noqa: E501

        Returns a boolean based on whether a tac value is valid or not  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.tac_validation(tac, async_req=True)
        >>> result = thread.get()

        Args:
            tac (str): The tac value to validate

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TacValid
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tac'] = \
            tac
        return self.tac_validation_endpoint.call_with_http_info(**kwargs)

    def update_allowance(
        self,
        order_id,
        if_match,
        body,
        **kwargs
    ):
        """Updates an allowance (Orders with Entitlements)  # noqa: E501

        All fields sent in this request will be set on the order referenced  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_allowance(order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use
            if_match (str):
            body (UpdateAllowancePayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_allowance_endpoint.call_with_http_info(**kwargs)

    def update_billable_weight(
        self,
        order_id,
        if_match,
        body,
        **kwargs
    ):
        """Updates the max billable weight  # noqa: E501

        Updates the DBAuthorizedWeight attribute for the Order Entitlements=  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_billable_weight(order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use
            if_match (str):
            body (UpdateBillableWeightPayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_billable_weight_endpoint.call_with_http_info(**kwargs)

    def update_max_billable_weight_as_tio(
        self,
        order_id,
        if_match,
        body,
        **kwargs
    ):
        """Updates the max billable weight with TIO remarks  # noqa: E501

        Updates the DBAuthorizedWeight attribute for the Order Entitlements and move TIO remarks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_max_billable_weight_as_tio(order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (UpdateMaxBillableWeightAsTIOPayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_max_billable_weight_as_tio_endpoint.call_with_http_info(**kwargs)

    def update_order(
        self,
        order_id,
        if_match,
        body,
        **kwargs
    ):
        """Updates an order  # noqa: E501

        All fields sent in this request will be set on the order referenced  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_order(order_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            order_id (str): ID of order to use
            if_match (str):
            body (UpdateOrderPayload):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Order
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['order_id'] = \
            order_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_order_endpoint.call_with_http_info(**kwargs)

