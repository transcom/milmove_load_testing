"""
    MilMove Prime API

    The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: dp3@truss.works
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from prime_client.api_client import ApiClient, Endpoint as _Endpoint
from prime_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from prime_client.model.address import Address
from prime_client.model.client_error import ClientError
from prime_client.model.create_mto_shipment import CreateMTOShipment
from prime_client.model.create_sit_extension import CreateSITExtension
from prime_client.model.error import Error
from prime_client.model.mto_agent import MTOAgent
from prime_client.model.mto_shipment import MTOShipment
from prime_client.model.reweigh import Reweigh
from prime_client.model.sit_extension import SITExtension
from prime_client.model.update_mto_shipment import UpdateMTOShipment
from prime_client.model.update_mto_shipment_status import UpdateMTOShipmentStatus
from prime_client.model.update_reweigh import UpdateReweigh
from prime_client.model.validation_error import ValidationError


class MtoShipmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_mto_agent_endpoint = _Endpoint(
            settings={
                'response_type': (MTOAgent,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}/agents',
                'operation_id': 'create_mto_agent',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'body':
                        (MTOAgent,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_mto_shipment_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/mto-shipments',
                'operation_id': 'create_mto_shipment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateMTOShipment,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_sit_extension_endpoint = _Endpoint(
            settings={
                'response_type': (SITExtension,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}/sit-extensions',
                'operation_id': 'create_sit_extension',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'body':
                        (CreateSITExtension,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_mto_shipment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}',
                'operation_id': 'delete_mto_shipment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                ],
                'required': [
                    'mto_shipment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_mto_agent_endpoint = _Endpoint(
            settings={
                'response_type': (MTOAgent,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}/agents/{agentID}',
                'operation_id': 'update_mto_agent',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'agent_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'agent_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'agent_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (MTOAgent,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                    'agent_id': 'agentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'agent_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_mto_shipment_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}',
                'operation_id': 'update_mto_shipment',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateMTOShipment,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_mto_shipment_address_endpoint = _Endpoint(
            settings={
                'response_type': (Address,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}/addresses/{addressID}',
                'operation_id': 'update_mto_shipment_address',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'address_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'address_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'address_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (Address,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                    'address_id': 'addressID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'address_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_mto_shipment_status_endpoint = _Endpoint(
            settings={
                'response_type': (MTOShipment,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}/status',
                'operation_id': 'update_mto_shipment_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateMTOShipmentStatus,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_reweigh_endpoint = _Endpoint(
            settings={
                'response_type': (Reweigh,),
                'auth': [],
                'endpoint_path': '/mto-shipments/{mtoShipmentID}/reweighs/{reweighID}',
                'operation_id': 'update_reweigh',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_shipment_id',
                    'reweigh_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'mto_shipment_id',
                    'reweigh_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_shipment_id':
                        (str,),
                    'reweigh_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateReweigh,),
                },
                'attribute_map': {
                    'mto_shipment_id': 'mtoShipmentID',
                    'reweigh_id': 'reweighID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'mto_shipment_id': 'path',
                    'reweigh_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_mto_agent(
        self,
        mto_shipment_id,
        body,
        **kwargs
    ):
        """createMTOAgent  # noqa: E501

        ### Functionality This endpoint is used to **create** and add agents for an existing MTO Shipment. Only the fields being modified need to be sent in the request body.  ### Errors The agent must always have a name and at least one method of contact (either `email` or `phone`).  The agent must be associated with the MTO shipment passed in the url.  The shipment should be associated with an MTO that is available to the Pime. If the caller requests a new agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mto_agent(mto_shipment_id, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment associated with the agent
            body (MTOAgent):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOAgent
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['body'] = \
            body
        return self.create_mto_agent_endpoint.call_with_http_info(**kwargs)

    def create_mto_shipment(
        self,
        **kwargs
    ):
        """createMTOShipment  # noqa: E501

        Creates a new shipment within the specified move. This endpoint should be used whenever the movers identify a need for an additional shipment. The new shipment will be submitted to the TOO for review, and the TOO must approve it before the contractor can proceed with billing.  **WIP**: The Prime should be notified by a push notification whenever the TOO approves a shipment connected to one of their moves. Otherwise, the Prime can fetch the related move using the [getMoveTaskOrder](#operation/getMoveTaskOrder) endpoint and see if this shipment has the status `\"APPROVED\"`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mto_shipment(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (CreateMTOShipment): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_mto_shipment_endpoint.call_with_http_info(**kwargs)

    def create_sit_extension(
        self,
        mto_shipment_id,
        body,
        **kwargs
    ):
        """createSITExtension  # noqa: E501

        ### Functionality This endpoint creates a storage in transit (SIT) extension request for a shipment. A SIT extension request is a request an increase in the shipment day allowance for the number of days a shipment is allowed to be in SIT. The total SIT day allowance includes time spent in both origin and destination SIT.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_sit_extension(mto_shipment_id, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment associated with the agent
            body (CreateSITExtension):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SITExtension
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['body'] = \
            body
        return self.create_sit_extension_endpoint.call_with_http_info(**kwargs)

    def delete_mto_shipment(
        self,
        mto_shipment_id,
        **kwargs
    ):
        """deleteMTOShipment  # noqa: E501

        ### Functionality This endpoint deletes an individual shipment by ID.  ### Errors * The mtoShipment should be associated with an MTO that is available to prime. * The mtoShipment must be a PPM shipment. * Counseling should not have already been completed for the associated MTO.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_mto_shipment(mto_shipment_id, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment to be deleted

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        return self.delete_mto_shipment_endpoint.call_with_http_info(**kwargs)

    def update_mto_agent(
        self,
        mto_shipment_id,
        agent_id,
        if_match,
        body,
        **kwargs
    ):
        """updateMTOAgent  # noqa: E501

        ### Functionality This endpoint is used to **update** the agents for an MTO Shipment. Only the fields being modified need to be sent in the request body.  ### Errors: The agent must always have a name and at least one method of contact (either `email` or `phone`).  The agent must be associated with the MTO shipment passed in the url.  The shipment should be associated with an MTO that is available to the Prime. If the caller requests an update to an agent, and the shipment is not on an available MTO, the caller will receive a **NotFound** response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_agent(mto_shipment_id, agent_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment associated with the agent
            agent_id (str): UUID of the agent being updated
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (MTOAgent):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOAgent
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['agent_id'] = \
            agent_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_mto_agent_endpoint.call_with_http_info(**kwargs)

    def update_mto_shipment(
        self,
        mto_shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """updateMTOShipment  # noqa: E501

        Updates an existing shipment for a move.  Note that there are some restrictions on nested objects:  * Service items: You cannot add or update service items using this endpoint. Please use [createMTOServiceItem](#operation/createMTOServiceItem) and [updateMTOServiceItem](#operation/updateMTOServiceItem) instead. * Agents: You cannot add or update agents using this endpoint. Please use [createMTOAgent](#operation/createMTOAgent) and [updateMTOAgent](#operation/updateMTOAgent) instead. * Addresses: You can add new addresses using this endpoint (and must use this endpoint to do so), but you cannot update existing ones. Please use [updateMTOShipmentAddress](#operation/updateMTOShipmentAddress) instead.  These restrictions are due to our [optimistic locking/concurrency control](https://transcom.github.io/mymove-docs/docs/dev/contributing/backend/use-optimistic-locking) mechanism.  Note that some fields cannot be manually changed but will still be updated automatically, such as `primeEstimatedWeightRecordedDate` and `requiredDeliveryDate`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_shipment(mto_shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment being updated.
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (UpdateMTOShipment):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_mto_shipment_endpoint.call_with_http_info(**kwargs)

    def update_mto_shipment_address(
        self,
        mto_shipment_id,
        address_id,
        if_match,
        body,
        **kwargs
    ):
        """updateMTOShipmentAddress  # noqa: E501

        ### Functionality This endpoint is used to **update** the addresses on an MTO Shipment. The address details completely replace the original, except for the UUID. Therefore a complete address should be sent in the request.  This endpoint **cannot create** an address. To create an address on an MTO shipment, the caller must use [updateMTOShipment](#operation/updateMTOShipment) as the parent shipment has to be updated with the appropriate link to the address.  ### Errors The address must be associated with the mtoShipment passed in the url. In other words, it should be listed as pickupAddress, destinationAddress, secondaryPickupAddress or secondaryDeliveryAddress on the mtoShipment provided. If it is not, caller will receive a **Conflict** Error.  The mtoShipment should be associated with an MTO that is available to prime. If the caller requests an update to an address, and the shipment is not on an available MTO, the caller will receive a **NotFound** Error.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_shipment_address(mto_shipment_id, address_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment associated with the address
            address_id (str): UUID of the address being updated
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (Address):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Address
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['address_id'] = \
            address_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_mto_shipment_address_endpoint.call_with_http_info(**kwargs)

    def update_mto_shipment_status(
        self,
        mto_shipment_id,
        if_match,
        body,
        **kwargs
    ):
        """updateMTOShipmentStatus  # noqa: E501

        ### Functionality This endpoint should be used by the Prime to confirm the cancellation of a shipment. It allows the shipment status to be changed to \"CANCELED.\" Currently, the Prime cannot update the shipment to any other status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_shipment_status(mto_shipment_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment associated with the agent
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (UpdateMTOShipmentStatus):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOShipment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_mto_shipment_status_endpoint.call_with_http_info(**kwargs)

    def update_reweigh(
        self,
        mto_shipment_id,
        reweigh_id,
        if_match,
        body,
        **kwargs
    ):
        """updateReweigh  # noqa: E501

        ### Functionality This endpoint can be used to update a reweigh with a new weight or to provide the reason why a reweigh did not occur. Only one of weight or verificationReason should be sent in the request body.  A reweigh is the second recorded weight for a shipment, as validated by certified weight tickets. Applies to one shipment. A reweigh can be triggered automatically, or requested by the customer or transportation office. Not all shipments are reweighed, so not all shipments will have a reweigh weight.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_reweigh(mto_shipment_id, reweigh_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_shipment_id (str): UUID of the shipment associated with the reweigh
            reweigh_id (str): UUID of the reweigh being updated
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (UpdateReweigh):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Reweigh
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_shipment_id'] = \
            mto_shipment_id
        kwargs['reweigh_id'] = \
            reweigh_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_reweigh_endpoint.call_with_http_info(**kwargs)

