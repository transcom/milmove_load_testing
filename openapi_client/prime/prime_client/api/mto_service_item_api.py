"""
    MilMove Prime API

    The Prime API is a RESTful API that enables the Prime contractor to request information about upcoming moves, update the details and status of those moves, and make payment requests. It uses Mutual TLS for authentication procedures.  All endpoints are located at `/prime/v1/`.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: milmove-developers@caci.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from prime_client.api_client import ApiClient, Endpoint as _Endpoint
from prime_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from prime_client.model.client_error import ClientError
from prime_client.model.error import Error
from prime_client.model.mto_service_item import MTOServiceItem
from prime_client.model.update_mto_service_item import UpdateMTOServiceItem
from prime_client.model.upload_with_omissions import UploadWithOmissions
from prime_client.model.validation_error import ValidationError


class MtoServiceItemApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_mto_service_item_endpoint = _Endpoint(
            settings={
                'response_type': ([MTOServiceItem],),
                'auth': [],
                'endpoint_path': '/mto-service-items',
                'operation_id': 'create_mto_service_item',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (MTOServiceItem,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_service_request_document_upload_endpoint = _Endpoint(
            settings={
                'response_type': (UploadWithOmissions,),
                'auth': [],
                'endpoint_path': '/mto-service-items/{mtoServiceItemID}/uploads',
                'operation_id': 'create_service_request_document_upload',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_service_item_id',
                    'file',
                ],
                'required': [
                    'mto_service_item_id',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_service_item_id':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'mto_service_item_id': 'mtoServiceItemID',
                    'file': 'file',
                },
                'location_map': {
                    'mto_service_item_id': 'path',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_mto_service_item_endpoint = _Endpoint(
            settings={
                'response_type': (MTOServiceItem,),
                'auth': [],
                'endpoint_path': '/mto-service-items/{mtoServiceItemID}',
                'operation_id': 'update_mto_service_item',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'mto_service_item_id',
                    'if_match',
                    'body',
                ],
                'required': [
                    'mto_service_item_id',
                    'if_match',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mto_service_item_id':
                        (str,),
                    'if_match':
                        (str,),
                    'body':
                        (UpdateMTOServiceItem,),
                },
                'attribute_map': {
                    'mto_service_item_id': 'mtoServiceItemID',
                    'if_match': 'If-Match',
                },
                'location_map': {
                    'mto_service_item_id': 'path',
                    'if_match': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_mto_service_item(
        self,
        **kwargs
    ):
        """createMTOServiceItem  # noqa: E501

        Creates one or more MTOServiceItems. Not all service items may be created, please see details below.  This endpoint supports different body definitions. In the modelType field below, select the modelType corresponding  to the service item you wish to create and the documentation will update with the new definition.  Upon creation these items are associated with a Move Task Order and an MTO Shipment. The request must include UUIDs for the MTO and MTO Shipment connected to this service item. Some service item types require additional service items to be autogenerated when added - all created service items, autogenerated included, will be returned in the response.  To update a service item, please use [updateMTOServiceItem](#operation/updateMTOServiceItem) endpoint.  ---  **`MTOServiceItemOriginSIT`**  MTOServiceItemOriginSIT is a subtype of MTOServiceItem.  This model type describes a domestic origin SIT service item. Items can be created using this model type with the following codes:  **DOFSIT**  **1st day origin SIT service item**. When a DOFSIT is requested, the API will auto-create the following group of service items:   * DOFSIT - Domestic origin 1st day SIT   * DOASIT - Domestic origin Additional day SIT   * DOPSIT - Domestic origin SIT pickup   * DOSFSC - Domestic origin SIT fuel surcharge  **DOASIT**  **Addt'l days origin SIT service item**. This represents an additional day of storage for the same item. Additional DOASIT service items can be created and added to an existing shipment that **includes a DOFSIT service item**.  ---  **`MTOServiceItemDestSIT`**  MTOServiceItemDestSIT is a subtype of MTOServiceItem.  This model type describes a domestic destination SIT service item. Items can be created using this model type with the following codes:  **DDFSIT**  **1st day destination SIT service item**.  These additional fields are optional for creating a DDFSIT:   * `firstAvailableDeliveryDate1`     * string <date>     * First available date that Prime can deliver SIT service item.     * firstAvailableDeliveryDate1, dateOfContact1, and timeMilitary1 are required together   * `dateOfContact1`     * string <date>     * Date of attempted contact by the prime corresponding to `timeMilitary1`     * dateOfContact1, timeMilitary1, and firstAvailableDeliveryDate1 are required together   * `timeMilitary1`     * string\\d{4}Z     * Time of attempted contact corresponding to `dateOfContact1`, in military format.     * timeMilitary1, dateOfContact1, and firstAvailableDeliveryDate1 are required together   * `firstAvailableDeliveryDate2`     * string <date>     * Second available date that Prime can deliver SIT service item.     * firstAvailableDeliveryDate2, dateOfContact2, and timeMilitary2 are required together   * `dateOfContact2`     * string <date>     * Date of attempted contact delivery by the prime corresponding to `timeMilitary2`     * dateOfContact2, timeMilitary2, and firstAvailableDeliveryDate2 are required together   * `timeMilitary2`     * string\\d{4}Z     * Time of attempted contact corresponding to `dateOfContact2`, in military format.     * timeMilitary2, dateOfContact2, and firstAvailableDeliveryDate2 are required together  When a DDFSIT is requested, the API will auto-create the following group of service items:   * DDFSIT - Domestic destination 1st day SIT   * DDASIT - Domestic destination Additional day SIT   * DDDSIT - Domestic destination SIT delivery   * DDSFSC - Domestic destination SIT fuel surcharge  **DDASIT**  **Addt'l days destination SIT service item**. This represents an additional day of storage for the same item. Additional DDASIT service items can be created and added to an existing shipment that **includes a DDFSIT service item**.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mto_service_item(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            body (MTOServiceItem): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [MTOServiceItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_mto_service_item_endpoint.call_with_http_info(**kwargs)

    def create_service_request_document_upload(
        self,
        mto_service_item_id,
        file,
        **kwargs
    ):
        """createServiceRequestDocumentUpload  # noqa: E501

        ### Functionality  This endpoint **uploads** a Service Request document for a ServiceItem.  The ServiceItem should already exist.  ServiceItems are created with the [createMTOServiceItem](#operation/createMTOServiceItem) endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_service_request_document_upload(mto_service_item_id, file, async_req=True)
        >>> result = thread.get()

        Args:
            mto_service_item_id (str): UUID of the service item to use.
            file (file_type): The file to upload.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UploadWithOmissions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_service_item_id'] = \
            mto_service_item_id
        kwargs['file'] = \
            file
        return self.create_service_request_document_upload_endpoint.call_with_http_info(**kwargs)

    def update_mto_service_item(
        self,
        mto_service_item_id,
        if_match,
        body,
        **kwargs
    ):
        """updateMTOServiceItem  # noqa: E501

        Updates MTOServiceItems after creation. Not all service items or fields may be updated, please see details below.  This endpoint supports different body definitions. In the modelType field below, select the modelType corresponding  to the service item you wish to update and the documentation will update with the new definition.  * Addresses: To update a destination service item's SIT destination final address, update the shipment destination address. For approved shipments, please use [updateShipmentDestinationAddress](#mtoShipment/updateShipmentDestinationAddress). For shipments not yet approved, please use [updateMTOShipmentAddress](#mtoShipment/updateMTOShipmentAddress).  * SIT Service Items: Take note that when updating `sitCustomerContacted`, `sitDepartureDate`, or `sitRequestedDelivery`, we want those to be updated on `DOASIT` (for origin SIT) and `DDASIT` (for destination SIT). If updating those values in other service items, the office users will not have as much attention to those values.  To create a service item, please use [createMTOServiceItem](#mtoServiceItem/createMTOServiceItem)) endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_mto_service_item(mto_service_item_id, if_match, body, async_req=True)
        >>> result = thread.get()

        Args:
            mto_service_item_id (str): UUID of service item to update.
            if_match (str): Optimistic locking is implemented via the `If-Match` header. If the ETag header does not match the value of the resource on the server, the server rejects the change with a `412 Precondition Failed` error. 
            body (UpdateMTOServiceItem):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MTOServiceItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['mto_service_item_id'] = \
            mto_service_item_id
        kwargs['if_match'] = \
            if_match
        kwargs['body'] = \
            body
        return self.update_mto_service_item_endpoint.call_with_http_info(**kwargs)

